```java
// 暴力法，leetcode竟然通过了
class Solution {
    public int majorityElement(int[] nums) {
        int len = nums.length;
        int target = len / 2 + 1;
        int sum = 0;
        int res = 0;
        // 因为元素在数组中出现的次数>target,所以最多出现的元素一定会出现在数组的左半部分
        for (int i = 0;i < target;i++) {
            int temp = 1;
            for (int j = 1;j < len;j++) {
                if(nums[i] == nums[j]) {
                    temp++;
                }
            }
            if (temp > sum) {
                sum = temp;
                res = nums[i];
            }
        }
        return res;

    }
}

// hashmap，key为数组元素，value为元素出现的次数
class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
        Double ls = Math.floor((nums.length)/2);
        int returnValue = 0 ;
        for(int num:nums){
            if(map.containsKey(num)){
                map.put(num,map.get(num)+1);
            }else{
                map.put(num,1);
            }
        }
        for(int key:map.keySet()){
            if(map.get(key)>ls){
                returnValue = key;
            }
        }
        return returnValue;
    }
}
// 排序后，最大出现次数的元素肯定位于中间位置
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}
```
